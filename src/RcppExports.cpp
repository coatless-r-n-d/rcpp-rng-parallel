// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// max_cores
int max_cores();
RcppExport SEXP _RcppRNGParallel_max_cores() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(max_cores());
    return rcpp_result_gen;
END_RCPP
}
// draw_numeric_unif
std::vector<double> draw_numeric_unif(unsigned int n, double min, double max);
RcppExport SEXP _RcppRNGParallel_draw_numeric_unif(SEXP nSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_numeric_unif(n, min, max));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppRNGParallel_max_cores", (DL_FUNC) &_RcppRNGParallel_max_cores, 0},
    {"_RcppRNGParallel_draw_numeric_unif", (DL_FUNC) &_RcppRNGParallel_draw_numeric_unif, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppRNGParallel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
